---
title: "coproID report test"
format: 
    nf-core-html: default
editor: visual
---


```{r echo = FALSE, message = FALSE, warning = FALSE}
library(ggplot2)
library(plotly)
library(tibble)
library(rlang)
library(magrittr)
library(tidyr)
library(plotly)
```

Pipeline version 2.0

## Introduction

[coproID](https://github.com/nf-core/coproID) is a pipeline designed to identify the source of coprolites, but can also be used to track the source of other metagenomic samples. More information regarding the pipeline and the output files can be found here: [coproid.readthedocs](https://coproid.readthedocs.io/en/latest/output.html)

# Host DNA

**Figure X.** **Stacked barplot of source prediction per sample based on the mapping and [sam2lca](https://sam2lca.readthedocs.io/en/latest/) results.**

```{r echo = FALSE, message = FALSE, warning = FALSE}

sam2lca <- read.csv("coproid.sam2lca_merged_report.csv")
  

sam2lca[, -c(1:3)] <- sweep(sam2lca[, -c(1:3)], 2, colSums(sam2lca[, -c(1:3)]), FUN = "/")

sam_long <- sam2lca %>%
  pivot_longer(cols = -c(1:3),
               names_to = "Sample",
                values_to = "Fraction")

sam_plot <- ggplot(sam_long, aes(x = Fraction,
                  y = Sample, fill = name)) +
  geom_bar(stat = "identity")

ggplotly(sam_plot, tooltip = "all")
```

# Source tracking

**Figure X.** **Stacked barplot of source prediction per sample based on the [sourcepredict](https://sourcepredict.readthedocs.io/en/latest/usage.html) analysis.**

```{r echo = FALSE, message = FALSE, warning = FALSE}

sp <- read.csv("coproid.report.sourcepredict.csv") 
spT <- t(sp[-1]) %>%
  as.data.frame()
colnames(spT) <- sp$X
spT <- rownames_to_column(spT, var = "sample")

sp_long <- spT %>%
  pivot_longer(
    cols = c(,-1),
    names_to = "taxa",
    values_to = "fraction")

portions <- ggplot(sp_long, aes(x = fraction, y = sample, fill = taxa)) +
  geom_col() +
  theme(axis.text.x = element_text(hjust = 1, size = 8))
interactive_plot <- ggplotly(portions, tooltip = "all")
view(interactive_plot)
```

**Table 1. Source prediction per sample based on the [sourcepredict](https://sourcepredict.readthedocs.io/en/latest/usage.html) analysis.**

```{r echo = FALSE, message = FALSE, warning = FALSE}

spT
```

# Embedding

**Figure X. Scatter plot based on the embedding file generated by [sourcepredict](https://sourcepredict.readthedocs.io/en/latest/usage.html).**

```{r echo = FALSE, message = FALSE, warning = FALSE}

embedding <- read.csv(file = 'coproid.embedding.sourcepredict.csv')

scatter <- ggplot(data = embedding, 
       mapping = aes(x = PC2, y = PC1 , 
                     color = labels)) + 
  geom_point() + theme_classic()

interactive_plot <- ggplotly(scatter, tooltip = "all")
interactive_plot

```

# Ancient DNA damage

**Figure X. Pydamage results**

```{r echo = FALSE, message = FALSE, warning = FALSE}

pydamage <- read.csv("coproid.pydamage_merged_report.csv")
pydamage$log <- -log10(pydamage$pvalue)

ggplot(pydamage, aes(x = damage_model_pmax, y = log, 
                      colour = Sample, shape = Taxa)) +
                  geom_point(size = 3) +
                  labs(x = "Modelled amount of damage of '5 end", 
                       y = "-log(10)(p-value)",
                       title = "") +
                  guides(colour = guide_legend(title = "Sample"),
                         shape = guide_legend(title = "Taxa"))

#ggplotly(pydamage_plot, tooltip = "all") 
```

**Damage profiler**

```{r echo = FALSE, message = FALSE, warning = FALSE}



```
